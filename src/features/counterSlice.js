import { createSlice } from '@reduxjs/toolkit';
import ContentListing1 from '../mockJsons/CONTENTLISTINGPAGE-PAGE1.json';
import ContentListing2 from '../mockJsons/CONTENTLISTINGPAGE-PAGE2.json';
import ContentListing3 from '../mockJsons/CONTENTLISTINGPAGE-PAGE3.json';

const initialState = {
   searchItems: []
};
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const movies = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    searchByText: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const items = [...ContentListing1['page']['content-items']['content'], ContentListing2['page']['content-items']['content'], ...ContentListing3['page']['content-items']['content']];
      const filterItems = items.filter((item) => {
         return item['name'] && item['name'].toLowerCase().includes(action.payload.toLowerCase())
      })
      state.searchItems = [...filterItems];
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { searchByText } = movies.actions;

export const filteredMovies = (state) => state.counter.searchItems;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default movies.reducer;
